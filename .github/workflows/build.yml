# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Compile

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - { runner: macos-latest,  os: darwin,  arch: amd64 }
          - { runner: macos-latest,  os: darwin,  arch: arm64 }
          - { runner: ubuntu-latest, os: linux,   arch: amd64 }
          - { runner: ubuntu-latest, os: linux,   arch: arm64 }
          - { runner: ubuntu-latest, os: windows, arch: amd64 }
      max-parallel: 1
    outputs:
      NEXTLAUNCH_VERSION: ${{ steps.build.outputs.NEXTLAUNCH_VERSION }}
      NEXTLAUNCH_COMMIT: ${{ steps.build.outputs.NEXTLAUNCH_COMMIT }}
      NEXTLAUNCH_DATE: ${{ steps.build.outputs.NEXTLAUNCH_DATE }}
      NEXTLAUNCH_BRANCH: ${{ steps.build.outputs.NEXTLAUNCH_BRANCH }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Build
        run: "go run build/build.go --os=${{ matrix.os }} --arch=${{ matrix.arch }}"

      - name: Get build output
        id: build
        run: cat output.txt >> $GITHUB_OUTPUT

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.NEXTLAUNCH_FILENAME }}
          path: binaries
          retention-days: 1
          if-no-files-found: error

  release:
    if: github.event_name == 'push'
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v4
        with:
          path: binaries
          merge-multiple: true

      - name: Download manifest file
        uses: actions/download-artifact@v4
        with:
          name: manifest.json

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: NextLaunch ${{ needs.build.outputs.NEXTLAUNCH_VERSION }}
          tag_name: v${{ needs.build.outputs.NEXTLAUNCH_VERSION }}
          files: | 
            binaries/*
            manifest.json
          draft: true
          prerelease: ${{ needs.build.outputs.NEXTLAUNCH_VERSION == 'dev-*' }}
          generate_release_notes: true
          failed_on_unmatched_files: true
